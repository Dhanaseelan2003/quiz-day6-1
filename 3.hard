import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

class TrieNode {
    TrieNode[] children;
    boolean isEnd;

    TrieNode() {
        children = new TrieNode[26];
        isEnd = false;
    }
}

public class ClubbedWords {

    public static List<String> findAllClubbedWords(String[] words) {
        List<String> result = new ArrayList<>();
        TrieNode root = new TrieNode();

        // Build the trie
        for (String word : words) {
            if (!word.isEmpty()) {
                insertWord(root, word);
            }
        }

        // Check for clubbed words
        for (String word : words) {
            if (!word.isEmpty() && isClubbedWord(word, root, root, 0, 0)) {
                result.add(word);
            }
        }

        return result;
    }

    private static void insertWord(TrieNode root, String word) {
        TrieNode node = root;
        for (char ch : word.toCharArray()) {
            int index = ch - 'a';
            if (node.children[index] == null) {
                node.children[index] = new TrieNode();
            }
            node = node.children[index];
        }
        node.isEnd = true;
    }

    private static boolean isClubbedWord(String word, TrieNode root, TrieNode current, int index, int count) {
        if (index == word.length()) {
            return count > 1 && current.isEnd;
        }

        char ch = word.charAt(index);
        int charIndex = ch - 'a';

        if (current.children[charIndex] != null) {
            if (current.children[charIndex].isEnd) {
                if (isClubbedWord(word, root, root, index + 1, count + 1)) {
                    return true;
                }
            }
            return isClubbedWord(word, root, current.children[charIndex], index + 1, count);
        }

        return false;
    }

    public static void main(String[] args) {
        String[] words = {"mat", "mate", "matbellmates", "bell", "bellmatesbell", "butterribbon", "butter", "ribbon"};
        List<String> clubbedWords = findAllClubbedWords(words);

        // Print the result
        System.out.println(clubbedWords);
    }
}

